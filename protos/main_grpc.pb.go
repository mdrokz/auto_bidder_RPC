// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidClient is the client API for Bid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidClient interface {
	GetBids(ctx context.Context, in *BidInput, opts ...grpc.CallOption) (*BidOutput, error)
}

type bidClient struct {
	cc grpc.ClientConnInterface
}

func NewBidClient(cc grpc.ClientConnInterface) BidClient {
	return &bidClient{cc}
}

func (c *bidClient) GetBids(ctx context.Context, in *BidInput, opts ...grpc.CallOption) (*BidOutput, error) {
	out := new(BidOutput)
	err := c.cc.Invoke(ctx, "/auto_bidder_RPC.Bid/getBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServer is the server API for Bid service.
// All implementations must embed UnimplementedBidServer
// for forward compatibility
type BidServer interface {
	GetBids(context.Context, *BidInput) (*BidOutput, error)
	mustEmbedUnimplementedBidServer()
}

// UnimplementedBidServer must be embedded to have forward compatible implementations.
type UnimplementedBidServer struct {
}

func (UnimplementedBidServer) GetBids(context.Context, *BidInput) (*BidOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids not implemented")
}
func (UnimplementedBidServer) mustEmbedUnimplementedBidServer() {}

// UnsafeBidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServer will
// result in compilation errors.
type UnsafeBidServer interface {
	mustEmbedUnimplementedBidServer()
}

func RegisterBidServer(s grpc.ServiceRegistrar, srv BidServer) {
	s.RegisterService(&Bid_ServiceDesc, srv)
}

func _Bid_GetBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServer).GetBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auto_bidder_RPC.Bid/getBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServer).GetBids(ctx, req.(*BidInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Bid_ServiceDesc is the grpc.ServiceDesc for Bid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auto_bidder_RPC.Bid",
	HandlerType: (*BidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBids",
			Handler:    _Bid_GetBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/main.proto",
}

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	GetProjects(ctx context.Context, in *ProjectEmpty, opts ...grpc.CallOption) (Project_GetProjectsClient, error)
	BidOnProject(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectStatus, error)
	SubscribeToProject(ctx context.Context, in *ProjectEmpty, opts ...grpc.CallOption) (Project_SubscribeToProjectClient, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) GetProjects(ctx context.Context, in *ProjectEmpty, opts ...grpc.CallOption) (Project_GetProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Project_ServiceDesc.Streams[0], "/auto_bidder_RPC.Project/getProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectGetProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Project_GetProjectsClient interface {
	Recv() (*Projects, error)
	grpc.ClientStream
}

type projectGetProjectsClient struct {
	grpc.ClientStream
}

func (x *projectGetProjectsClient) Recv() (*Projects, error) {
	m := new(Projects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectClient) BidOnProject(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectStatus, error) {
	out := new(ProjectStatus)
	err := c.cc.Invoke(ctx, "/auto_bidder_RPC.Project/bidOnProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) SubscribeToProject(ctx context.Context, in *ProjectEmpty, opts ...grpc.CallOption) (Project_SubscribeToProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Project_ServiceDesc.Streams[1], "/auto_bidder_RPC.Project/subscribeToProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectSubscribeToProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Project_SubscribeToProjectClient interface {
	Recv() (*Projects, error)
	grpc.ClientStream
}

type projectSubscribeToProjectClient struct {
	grpc.ClientStream
}

func (x *projectSubscribeToProjectClient) Recv() (*Projects, error) {
	m := new(Projects)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	GetProjects(*ProjectEmpty, Project_GetProjectsServer) error
	BidOnProject(context.Context, *ProjectInfo) (*ProjectStatus, error)
	SubscribeToProject(*ProjectEmpty, Project_SubscribeToProjectServer) error
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (UnimplementedProjectServer) GetProjects(*ProjectEmpty, Project_GetProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectServer) BidOnProject(context.Context, *ProjectInfo) (*ProjectStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidOnProject not implemented")
}
func (UnimplementedProjectServer) SubscribeToProject(*ProjectEmpty, Project_SubscribeToProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToProject not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_GetProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectEmpty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServer).GetProjects(m, &projectGetProjectsServer{stream})
}

type Project_GetProjectsServer interface {
	Send(*Projects) error
	grpc.ServerStream
}

type projectGetProjectsServer struct {
	grpc.ServerStream
}

func (x *projectGetProjectsServer) Send(m *Projects) error {
	return x.ServerStream.SendMsg(m)
}

func _Project_BidOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).BidOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auto_bidder_RPC.Project/bidOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).BidOnProject(ctx, req.(*ProjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_SubscribeToProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectEmpty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServer).SubscribeToProject(m, &projectSubscribeToProjectServer{stream})
}

type Project_SubscribeToProjectServer interface {
	Send(*Projects) error
	grpc.ServerStream
}

type projectSubscribeToProjectServer struct {
	grpc.ServerStream
}

func (x *projectSubscribeToProjectServer) Send(m *Projects) error {
	return x.ServerStream.SendMsg(m)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auto_bidder_RPC.Project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bidOnProject",
			Handler:    _Project_BidOnProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getProjects",
			Handler:       _Project_GetProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "subscribeToProject",
			Handler:       _Project_SubscribeToProject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/main.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CheckStatus(ctx context.Context, in *AuthEmpty, opts ...grpc.CallOption) (*AuthStatus, error)
	Authenticate(ctx context.Context, in *AuthCredentials, opts ...grpc.CallOption) (*AuthStatus, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CheckStatus(ctx context.Context, in *AuthEmpty, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, "/auto_bidder_RPC.Auth/checkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Authenticate(ctx context.Context, in *AuthCredentials, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, "/auto_bidder_RPC.Auth/authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	CheckStatus(context.Context, *AuthEmpty) (*AuthStatus, error)
	Authenticate(context.Context, *AuthCredentials) (*AuthStatus, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) CheckStatus(context.Context, *AuthEmpty) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedAuthServer) Authenticate(context.Context, *AuthCredentials) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auto_bidder_RPC.Auth/checkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckStatus(ctx, req.(*AuthEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auto_bidder_RPC.Auth/authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authenticate(ctx, req.(*AuthCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auto_bidder_RPC.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "checkStatus",
			Handler:    _Auth_CheckStatus_Handler,
		},
		{
			MethodName: "authenticate",
			Handler:    _Auth_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/main.proto",
}
